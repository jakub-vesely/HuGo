import os
import sys

introduction = '''/*
 * this file is automatically generated by process_lua_files.py
 */
'''

def build_header_file():
    with open(".lua_files.h", "w") as file:
        file.write(introduction)
        file.write('''
#pragma once
#include <stdbool.h>
void create_lua_files();
''');

def get_body_entry(path):
    modules_prefix = "modules/"

    file_name = os.path.basename(path)
    var = os.path.basename(path).replace(".", "_")

    indent = "    "
    out = f'{indent}extern const char {var}_start[] asm("_binary_{var}_start");\n'
    out += f'{indent}extern const char {var}_end[]   asm("_binary_{var}_end");\n'
    out += f'{indent}init_file("/lua/{file_name}", {var}_start, {var}_end);\n'
    return out

def get_body():
    file_paths = sys.argv[1:]
    body = ""
    for path in file_paths:
        body += "\n" if body else ""
        body += get_body_entry(path)
    return body

def get_init_file():
    return '''
void init_file(const char * file_name, const char * data_start, const char * data_end)
{
    static const char *TAG = "LUA_FILES";
    if( access(file_name, F_OK ) != -1 ) {
        ESP_LOGI(TAG, "file %s already exists", file_name);
    }
    else{
        ESP_LOGI(TAG, "file %s will be created", file_name);
        FILE *f = fopen(file_name, "wb");

        if (f == NULL) {
            ESP_LOGE(TAG, "Failed to open file for writing");
            return;
        }
        fwrite(data_start, sizeof(char), data_end - data_start - 1, f);
        fclose(f);
    }
}

'''

def get_c_includes():
    return '''
#include ".lua_files.h"
#include <unistd.h>
#include "esp_err.h"
#include "esp_log.h"
'''
def build_source_file():
    with open(".lua_files.c", "w") as file:
        file.write(introduction)
        file.write(get_c_includes())
        file.write(get_init_file())
        file.write(("void create_lua_files()\n{\n"))
        file.write(get_body())
        file.write(("}\n"))


build_header_file()
build_source_file()
